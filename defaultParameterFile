#Model parameters
#lines starting with any amount of white space, followed by # are comments
#Lines with no = will also be skipped
#Format is "label=value" on each line
#Label is generally <category>.name
#These values will be output alphabetically to a filecalled "RunParameters"
#So <Category> helps to group parameters together in this file

#Parameters that exist in the code but not set here will assume default values 
#see parameters.h - add new parameters to the setDefaults method before trying to set them here

#Attempts to set parameters not already defined in the code will cause code execution to halt

#-------------------------------
#run control
#-------------------------------
#Number of agents to create - integer
run.nAgents=60

#Number of steps to run for - integer
run.nSteps=50

#number of OMP threads to use - integer
#Increase the number here if using openmp to parallelise any loops.
#Note number of threads needs to be <= to number of cores/threads supported on the local machine
run.nThreads=1

#random seed - integer
#change to vary the stochastic parts of the model
#runs with the same seed should produce the same output...although maybe not if nThreads>1
run.randomSeed=0

#how many times to repeat the run with these parameters - integer
#Leave this set to 1 unles you want multiple runs with different random seeds
#If > 1 the same parameters will be used for nRepeats, but with different random seeds starting from
#run.randomSeed above, and then adding run.randomIncrement for each run
#Values <=0 here will get set to 1
run.nRepeats=1
#Add this value to the seed for each successive run - integer
run.randomIncrement=57
#NB setting repeats to more than 1 will set experiment.run.number irrespective of any value set below. 

#-------------------------------
#output
#-------------------------------
#Unique name for this set of model runs, if desired - string
experiment.name=default

#location for the output files - subdirectory will be created called experiment.<name> - string
experiment.output.directory=./output

#short text to outline experiment purpose - string
experiment.description= The default parameter set was used

#run number - allows runs with above name to be grouped into sets (experiments!) - integer
#If this value is set (uncomment line below) oldfiles may be overwritten. The directory for all runs with this file will be fixed,
#unless repeats is setto more then 1 above.
#Otherwise new directories will be auto-created for each run starting at 0000, and incrementing automatically
#experiment.run.number=0000

#Experiments are assumed to be numbered 0000 to 9999 - integer
#Paths will look like experiment.output.directory/experiment.name/run_0000 etc.
#if more (or fewer) are needed, specify the maximum number of runs here 
#to the nearest power of 10 (using e.g. 100 or 1000 - the leading 1 will be removed - so don't just put 1!)
#if you exceed this number, directory names will still increment by run number, but they won't be all a nice tidy length
#experiment.run.prefix=10

#name of the output file - string
outputFile=diseaseSummary

#-------------------------------
#disease
#-------------------------------
#In the simplest case recovery in any timestep will happen if a random number drawn from (0,1) is less than this value
disease.simplistic.recoveryRate=0.0008
#and infected individual will add this much contamination to any place every timestep
disease.simplistic.infectionShedLoad=0.001
#any place contaminated with disease will lose contamination exponentially at this rate per timestep
places.disease.simplistic.fractionalDecrement=0.5
#if this flag is set to true any contamination in a places gets removed at the start of each timestep
places.cleanContamination=false
