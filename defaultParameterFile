#Model parameters
#lines starting with any amount of white space, followed by # are comments
#Lines with no = will also be skipped
#Format is "label=value" on each line
#Label is generally <category>.name
#These values will be output alphabetically to a filecalled "RunParameters"
#So <Category> helps to group parameters together in this file

#Parameters that exist in the code but not set here will assume default values 
#see parameters.h - add new parameters to the setDefaults method before trying to set them here

#Attempts to set parameters not already defined in the code will cause code execution to halt

#TODO allow for #include of other parameter files. 

#-------------------------------
#run control
#-------------------------------
#Number of agents to create - integer
run.nAgents=350000


#Number of steps to run for - integer
run.nSteps=300

#number of OMP threads to use - integer
#Increase the number here if using openmp to parallelise any loops.
#Note number of threads needs to be <= to number of cores/threads supported on the local machine
run.nThreads=2

#random seed - integer
#change to vary the stochastic parts of the model
#runs with the same seed should produce the same output...although maybe not if nThreads>1
run.randomSeed=0

#how many times to repeat the run with these parameters - integer
#Leave this set to 1 unles you want multiple runs with different random seeds
#If > 1 the same parameters will be used for nRepeats, but with different random seeds starting from
#run.randomSeed above, and then adding run.randomIncrement for each run
#Values <=0 here will get set to 1
run.nRepeats=1

#Add this value to the seed for each successive run - integer
#Note in a multithreaded run run.Nthreads RNG are created each separated by an increment of 1 in the seed
run.randomIncrement=57

#NB setting repeats to more than 1 will set autmatically set and increase experiment.run.number irrespective of any value set below. 

#-------------------------------
#schedule
#-------------------------------
#pick schedule from either "mobile" or "stationary" - string
#if you set simpleMobile below, you probably want mobile here too...
#if you set mobile here and simpleOnePlace below then work,home and transport will all actually be the same place
schedule.type=mobile

#-------------------------------
#model
#-------------------------------
#pick model type either "simpleMobile" or "simpleOnePlace" - string
#simpleOnePlace puts all agents into a single location, and there they stay.
model.type=simpleMobile

#-------------------------------
#timestepping
#-------------------------------
#units to use to determine how much real time is represetned by each model timestep
#valid values are years,months,days,hours,minutes or seconds
timeStep.units=hours

#the actual time duration of each step in the above units - double
#so if this is set to 2 and the above units set to hours, each timestep will represent 2 hours of real time
#note that any rates set in this file will need to take into account this timing 
timeStep.dt=1

#the date on which the model run begins - string
#Format is "day dd/mm/yyyy hh:mm:ss" - assumed UTC (although time zones not yet implemented)
#The default value is Mon 01/01/1900 00:00:00
#Note the date has to be specified *exactly* as below in terms of spaces / and : - Day of the week should be three letters, initally capitalised 
#If the day of the week is not consistent with the (gregorian) value, it will get corrected
#timeStep.startdate=Mon 31/01/2022 00:00:00
#-------------------------------
#output
#-------------------------------
#Unique name for this set of model runs, if desired - string
experiment.name=default

#location for the output files - subdirectory will be created (or used if already existing) called experiment.name - string
experiment.output.directory=./experiments

#short text to outline experiment purpose - string
experiment.description= The default parameter set was used

#run number - allows runs with above name to be grouped into sets (experiments!) - integer
#If this value is set (uncomment line below) oldfiles may be overwritten. The directory for all runs with this file will be fixed,
#unless repeats is setto more then 1 above.
#Otherwise new directories will be auto-created for each run starting at 0000, and incrementing automatically
#experiment.run.number=0000

#Experiments are assumed to be numbered 0000 to 9999 - integer
#Paths will look like experiment.output.directory/experiment.name/run_0000 etc.
#if more (or fewer) are needed, specify the maximum number of runs here 
#to the nearest power of 10 (using e.g. 100 or 1000 - the leading 1 will be removed - so don't just put 1!)
#if you exceed this number, directory names will still increment by run number, but they won't be all a nice tidy length
#experiment.run.prefix=10

#name of the output file - string
outputFile=diseaseSummary

#-------------------------------
#disease
#-------------------------------
#Rate *PER HOUR* - double
#In the simplest case recovery in any timestep will happen if a random number drawn from (0,1) is less than this value
disease.simplistic.recoveryRate=0.008

#Rate *PER HOUR* - double
#an infected individual will have a chance to die at this rate per unit time 
disease.simplistic.deathRate=0.

#Rate *PER HOUR* - double
#an infected individual will add this much contamination to any place every timestep
disease.simplistic.infectionShedLoad=0.01

#how many (randomly allocated) agents have the disease at the start of the run
disease.simplistic.initialNumberInfected=3000

#Rate *PER HOUR* - double
#any place contaminated with disease will lose contamination exponentially at this rate
places.disease.simplistic.fractionalDecrement=0.9

#if this flag is set to true any contamination in a places gets removed at the start of each timestep
places.cleanContamination=true
